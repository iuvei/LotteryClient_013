<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="86" minHeight="32" 
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            import spark.components.Group;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                }
                super.updateDisplayList(unscaledWidth, unscaledHeight);
				this.hostComponent.buttonMode = true;
            }
            
            private var cornerRadius:Number = 2;
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
    
    <!--- @private -->
    <s:Rect  left="0" right="0" top="0" bottom="0" radiusX="5">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0x86b3b6"  alpha="0.5" />
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

	<s:Rect  left="0" right="0" top="0" bottom="0" radiusX="5" includeIn="over,down">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x82e3f3"  />
				<s:GradientEntry color="0x5a9eab"  />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
    <s:HGroup horizontalAlign="center" width="100%" height="100%" verticalAlign="middle">
		<s:BitmapImage source="{getStyle('downsIcon')}"/>
		<s:Label id="labelDisplay"
				 textAlign="center"
				 maxDisplayedLines="1"
				 horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
				 left="10" right="10" top="2" bottom="2"
				 fontSize="14" color="0xffffff"
				 >
		</s:Label>
	</s:HGroup>
    
    
</s:SparkButtonSkin>
