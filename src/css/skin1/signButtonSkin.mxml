<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

@see spark.components.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   width="85" height="28" 
				   alpha.disabled="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import spark.components.Group;
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay"];
			
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}  
			
			/**
			 *  @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				var cr:Number = getStyle("cornerRadius");
				
				if (cornerRadius != cr)
				{
					cornerRadius = cr;
				}
				
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				this.hostComponent.buttonMode = true;
			}
			
			private var cornerRadius:Number = 2;
			
		]]>        
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" stateGroups="upStates"/>
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	
	<s:HGroup width="100%" height="100%" verticalAlign="middle" includeIn="upStates">
		<s:BitmapImage smooth="true" source="{getStyle('imageNormal')}"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" verticalAlign="middle" includeIn="overStates,downStates" alpha="0.8">
		<s:BitmapImage smooth="true" source="{getStyle('imageNormal')}"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" verticalAlign="middle" includeIn="disabledStates">
		<s:BitmapImage smooth="true" source="{getStyle('imageEnabel')}"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" verticalAlign="middle" includeIn="selectedStates">
		<s:BitmapImage smooth="true" source="{getStyle('imageSelected')}" />
	</s:HGroup>
	
	
	<s:Label id="labelDisplay" top="2" bottom="2" fontFamily="Microsoft YaHei,微软雅黑" fontWeight="normal"
			 left="30" verticalCenter="2"
			 verticalAlign="middle">
	</s:Label>
	
</s:SparkButtonSkin>
