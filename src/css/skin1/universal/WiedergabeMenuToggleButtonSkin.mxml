<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- 该外观样式用于选择玩法的菜单按钮样式(选中时为黄色渐变,默认是蓝色渐变) The default skin class for a Spark ToggleButton component.

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="50" minHeight="27"
                   alpha.disabledStates="0.5">
    
    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            var cr:Number = getStyle("cornerRadius");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
				//border.radiusX = cornerRadius; 
            }
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
			this.hostComponent.buttonMode = true;
        }
        
        private var cornerRadius:Number = 2;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
	<s:Rect left="0" right="0" top="0" bottom="0" radiusX="0">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xfdfdfd"/>
				<s:GradientEntry color="0xefefef"/>
				<s:GradientEntry color="0xeaeaea"/>
				<s:GradientEntry color="0xd1d1d1"/>
				<s:GradientEntry color="0xeaeaea"/>
				<s:GradientEntry color="0xefefef"/>
				<s:GradientEntry color="0xfdfdfd"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:LinearGradientStroke>
				<s:GradientEntry color="0xb9b9b9" alpha="1.0"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<s:Rect left="0" right="0" top="0" bottom="0" radiusX="0"  includeIn="selectedStates">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x686868"/>
				<s:GradientEntry color="0x646464"/>
				<s:GradientEntry color="0x626262"/>
				<s:GradientEntry color="0x5d5d5d"/>
				<s:GradientEntry color="0x5c5b5b"/>
				<s:GradientEntry color="0x555454"/>
				<s:GradientEntry color="0x5c5b5b"/>
				<s:GradientEntry color="0x5d5d5d"/>
				<s:GradientEntry color="0x626262"/>
				<s:GradientEntry color="0x646464"/>
				<s:GradientEntry color="0x686868"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:LinearGradientStroke>
				<s:GradientEntry color="0x3d3d3d" alpha="1.0"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<!--<s:BitmapImage source="@Embed('css/skin1/universal/images/001_03.png')" />
	<s:BitmapImage includeIn="selectedStates" source="@Embed('css/skin1/universal/images/004_03.png')"/>-->
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay" width="100%" height="100%"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1" color.selectedStates="0xFFFFFF"
			 paddingLeft="10" paddingRight="10" verticalCenter="0">
	</s:Label>
    
</s:SparkButtonSkin>
