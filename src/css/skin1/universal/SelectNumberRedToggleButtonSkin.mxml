<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- 该外观样式用于各个彩种选号(选中状态为红色) The default skin class for a Spark ToggleButton component.

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   width="{getStyle('w')}" height="{getStyle('h')}"
                   alpha.disabledStates="0.5">
    
    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            var cr:Number = getStyle("cornerRadius");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                /* shadow.radiusX = cornerRadius;
                fill.radiusX = cornerRadius;
                lowlight.radiusX = cornerRadius;
                highlight.radiusX = cornerRadius; */
                border.radiusX = cornerRadius;
            }
            
        /*     if (highlightStroke) highlightStroke.radiusX = cornerRadius;
            if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
            if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;
             */
            super.updateDisplayList(unscaledWidth, unscaledHeight);
			this.hostComponent.buttonMode = true;
        }
        
        private var cornerRadius:Number = 2;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
   
	
	
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0"  radiusX="2" visible="false" includeInLayout="false">
		<s:stroke>
			<s:LinearGradientStroke rotation="45" weight="1">
				<s:GradientEntry color="0x7e85cb" />
				<s:GradientEntry color="0x767dc7" />
				<s:GradientEntry color="0x585f9f" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	<s:BitmapImage source="@Embed('css/skin1/universal/images/003_03.png')"/>
	<s:BitmapImage includeIn="over,down,selectedStates" source="@Embed('css/skin1/universal/images/002_03.png')"/>
	
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             fontStyle="italic" fontFamily="Microsoft YaHei,微软雅黑"
			 color="0x2a2929"
			 color.over="0xffffff"
			 color.down="0xffffff"
			 color.upAndSelected="0xffffff" color.overAndSelected="0xffffff"
             horizontalCenter="-1" verticalCenter="3">
    </s:Label>
    
</s:SparkButtonSkin>
