<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- 该外观样式用于各个彩种选号(选中状态为红色) The default skin class for a Spark ToggleButton component.

@see spark.components.ToggleButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   width="{getStyle('w')}" height="{getStyle('h')}"
				   alpha.disabledStates="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ToggleButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay"];
		
		/**
		 * @private
		 */    
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			this.hostComponent.buttonMode = true;
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	
	
	
	
	<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
	<!--- @private -->
	<s:Ellipse width="100%" height="100%">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xfdfdfd"/>
				<s:GradientEntry color="0xe2e2e2"/>
				<s:GradientEntry color="0xdddddd"/>
				<s:GradientEntry color="0xd2d2d2"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:LinearGradientStroke>
				<s:GradientEntry color="0x9f9f9f" alpha="1.0"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Ellipse>
	<s:Ellipse width="100%" height="100%" includeIn="over,down,selectedStates">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xff829c"/>
				<s:GradientEntry color="0xff617f"/>
				<s:GradientEntry color="0xed3f54"/>
				<s:GradientEntry color="0xdd2936"/>
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:LinearGradientStroke>
				<s:GradientEntry color="0xe02828" alpha="1.0"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Ellipse>
	<!-- layer 8: text -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 fontFamily="Microsoft YaHei,微软雅黑"
			 color="0x2a2929"
			 color.over="0xffffff"
			 color.down="0xffffff"
			 color.upAndSelected="0xffffff" color.overAndSelected="0xffffff"
			 horizontalCenter="-1" verticalCenter="2">
	</s:Label>
	
</s:SparkButtonSkin>
