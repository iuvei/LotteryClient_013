<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- 改外观样式用于越南玩法按钮样式(默认状态为蓝色渐变,选中状态为红色渐变)The default skin class for a Spark ToggleButton component.

     @see spark.components.ToggleButton
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21"  width="{getStyle('w')}" height="{getStyle('h')}"
                   alpha.disabledStates="0.5">
    
    <!-- host component -->
    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ToggleButton")]
    ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized. 
           For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */    
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
        {
            var cr:Number = getStyle("cornerRadius");
            
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                  /* shadow.radiusX = cornerRadius; 
                fill.radiusX = cornerRadius;
                lowlight.radiusX = cornerRadius;
                highlight.radiusX = cornerRadius; */
                border.radiusX = cornerRadius; 
            }
            
            /* if (highlightStroke) highlightStroke.radiusX = cornerRadius;
            if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
            if (hldownstroke2) hldownstroke2.radiusX = cornerRadius; */
            
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
        
        private var cornerRadius:Number = 2;
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
    <!-- layer 1: shadow -->
    <!--- @private -->
    
    <!-- layer 2: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0x87919a" color.upAndSelected="0xd76171" color.over="0xd76171" color.downAndSelected="0xd76171"/>
				<s:GradientEntry color="0x859096" color.upAndSelected="0xd55f6d" color.over="0xd55f6d" color.downAndSelected="0xd55f6d"/>
				<s:GradientEntry color="0x838d96" color.upAndSelected="0xd25968" color.over="0xd25968" color.downAndSelected="0xd25968"/>
				<s:GradientEntry color="0x7d8a92" color.upAndSelected="0xd1555d" color.over="0xd1555d" color.downAndSelected="0xd1555d"/>
				<s:GradientEntry color="0x77848c" color.upAndSelected="0xc95153" color.over="0xc95153" color.downAndSelected="0xc95153"/>
				<s:GradientEntry color="0x6e7b83" color.upAndSelected="0xc0484a" color.over="0xc0484a" color.downAndSelected="0xc0484a"/>
				<s:GradientEntry color="0x637079"  color.upAndSelected="0xb63f41" color.over="0xb63f41" color.downAndSelected="0xb63f41"/>
				<s:GradientEntry color="0x56646d" color.upAndSelected="0xa73238" color.over="0xa73238" color.downAndSelected="0xa73238"/>
				<s:GradientEntry color="0x485963" color.upAndSelected="0x912a2e" color.over="0x912a2e" color.downAndSelected="0x912a2e"/>
				<s:GradientEntry color="0x3a4b55" color.upAndSelected="0x7d2124" color.over="0x7d2124" color.downAndSelected="0x7d2124"/>
				<s:GradientEntry color="0x32434d" color.upAndSelected="0x711b1e" color.over="0x711b1e" color.downAndSelected="0x711b1e"/>
				<s:GradientEntry color="0x2e3f49" color.upAndSelected="0x68191e" color.over="0x68191e" color.downAndSelected="0x68191e"/>
				<s:GradientEntry color="0x2b3c44" color.upAndSelected="0x5d161a" color.over="0x5d161a" color.downAndSelected="0x5d161a"/>
				<s:GradientEntry color="0x2d3b44" color.upAndSelected="0x63171b" color.over="0x63171b" color.downAndSelected="0x63171b"/>
				<s:GradientEntry color="0x303d45" color.upAndSelected="0x68191c" color.over="0x68191c" color.downAndSelected="0x68191c"/>
				<s:GradientEntry color="0x364147" color.upAndSelected="0x701b1e" color.over="0x701b1e" color.downAndSelected="0x701b1e"/>
				<s:GradientEntry color="0x3c454c" color.upAndSelected="0x791f1f" color.over="0x791f1f" color.downAndSelected="0x791f1f"/>
				<s:GradientEntry color="0x444d54" color.upAndSelected="0x882124" color.over="0x882124" color.downAndSelected="0x882124"/>
				<s:GradientEntry color="0x4c555a" color.upAndSelected="0x91262e" color.over="0x91262e" color.downAndSelected="0x91262e"/>
				<s:GradientEntry color="0x545b61" color.upAndSelected="0x942933" color.over="0x942933" color.downAndSelected="0x942933"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0xa6a5a3"  alpha="0.2"
								 color.upAndSelected="0xe18381"
								 color.over="0xe18381"
								 color.downAndSelected="0xe18381"
                                />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="0">
    </s:Label>
    
</s:SparkButtonSkin>
